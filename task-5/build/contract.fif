"Asm.fif" include
// automatically generated from `/home/borys/.config/toncli/func-libs/stdlib-tests.func` `/home/borys/ton-func-contest1/task-5/func/code.fc` 
PROGRAM{
  90427 DECLMETHOD pack_data
  DECLPROC load_data
  DECLPROC find_request_old
  DECLPROC find_request_inline
  DECLPROC find_request
  DECLPROC replace_request_old
  DECLPROC replace_request_2
  DECLPROC replace_request_1
  DECLPROC replace_request
  DECLPROC recv_external
  DECLPROC recv_internal
  pack_data PROC:<{
    //  public_key1 public_key2
    0 PUSHINT	//  public_key1 public_key2 _2=0
    s0 s2 XCHG
    NEWC	//  _2=0 public_key2 public_key1 _3
    256 STU	//  _2=0 public_key2 _5
    256 STU	//  _2=0 _7
    25 STU	//  _11
    ENDC	//  _12
  }>
  load_data PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    256 LDU	//  public_key1 ds
    256 LDU	//  public_key1 public_key2 ds
    -ROT	//  ds public_key1 public_key2
  }>
  find_request_old PROC:<{
    //  s hash
    -1 PUSHINT	//  s hash pos=-1
    0 PUSHINT	//  s hash pos=-1 size=0
    1 PUSHINT	//  s hash pos=-1 size=0 lvl=1
    WHILE:<{
      s2 PUSH	//  s hash pos size lvl pos
      -1 EQINT	//  s hash pos size lvl _9
      s5 PUSH	//  s hash pos size lvl _9 s
      SREMPTY	//  s hash pos size lvl _9 _10
      NOT	//  s hash pos size lvl _9 _11
      AND	//  s hash pos size lvl _12
    }>DO<{	//  s hash pos size lvl
      SWAP	//  s hash pos lvl size
      INC	//  s hash pos lvl size
      s0 s4 XCHG	//  size hash pos lvl s
      LDREF	//  size hash pos lvl ref s
      s5 PUSH	//  size hash pos lvl ref s size
      4 EQINT	//  size hash pos lvl ref s _19
      s6 PUSH	//  size hash pos lvl ref s _19 size
      8 EQINT	//  size hash pos lvl ref s _19 _21
      OR	//  size hash pos lvl ref s _22
      IF:<{	//  size hash pos lvl ref s
        DROP	//  size hash pos lvl ref
        SWAP	//  size hash pos ref lvl
        INC	//  size hash pos ref lvl
        SWAP	//  size hash pos lvl ref
        CTOS	//  size hash pos lvl s
      }>ELSE<{	//  size hash pos lvl ref s
        SWAP	//  size hash pos lvl s ref
        HASHCU	//  size hash pos lvl s _26
        s4 PUSH	//  size hash pos lvl s _26 hash
        EQUAL	//  size hash pos lvl s _27
        IF:<{	//  size hash pos lvl s
          s2 POP	//  size hash s lvl
          s3 s0 PUSH2	//  size hash s lvl size lvl
          SUB	//  size hash s lvl pos
          s0 s2 XCHG	//  size hash pos lvl s
        }>	//  size hash pos lvl s
      }>
      s4 s4 XCHG2	//  s hash pos size lvl
    }>	//  s hash pos size lvl
    s2 s4 XCHG
    4 BLKDROP	//  pos
  }>
  find_request_inline PROCREF:<{
    //  s hash
    OVER	//  s hash s
    SREFS	//  s hash _2
    4 EQINT	//  s hash _4
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _5 s
      SWAP	//  hash s _5
      HASHCU	//  hash s _7
      s2 PUSH	//  hash s _7 hash
      EQUAL	//  hash s _8
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _9=0
      }>	//  hash s
      LDREF	//  hash _10 s
      SWAP	//  hash s _10
      HASHCU	//  hash s _12
      s2 PUSH	//  hash s _12 hash
      EQUAL	//  hash s _13
      IFJMP:<{	//  hash s
        2DROP	// 
        1 PUSHINT	//  _14=1
      }>	//  hash s
      LDREF	//  hash _15 s
      SWAP	//  hash s _15
      HASHCU	//  hash s _17
      s2 PUSH	//  hash s _17 hash
      EQUAL	//  hash s _18
      IFJMP:<{	//  hash s
        2DROP	// 
        2 PUSHINT	//  _19=2
      }>	//  hash s
      LDREF	//  hash _76 _75
      DROP	//  hash _20
      HASHCU	//  hash _22
      SWAP	//  _22 hash
      EQUAL	//  _23
      IFJMP:<{	// 
        3 PUSHINT	//  _24=3
      }>	// 
      -100 PUSHINT	//  _25=-100
    }>	//  s hash
    OVER	//  s hash s
    SREFS	//  s hash _26
    3 EQINT	//  s hash _28
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _29 s
      SWAP	//  hash s _29
      HASHCU	//  hash s _31
      s2 PUSH	//  hash s _31 hash
      EQUAL	//  hash s _32
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _33=0
      }>	//  hash s
      LDREF	//  hash _34 s
      SWAP	//  hash s _34
      HASHCU	//  hash s _36
      s2 PUSH	//  hash s _36 hash
      EQUAL	//  hash s _37
      IFJMP:<{	//  hash s
        2DROP	// 
        1 PUSHINT	//  _38=1
      }>	//  hash s
      LDREF	//  hash _82 _81
      DROP	//  hash _39
      HASHCU	//  hash _41
      SWAP	//  _41 hash
      EQUAL	//  _42
      IFJMP:<{	// 
        2 PUSHINT	//  _43=2
      }>	// 
      -100 PUSHINT	//  _44=-100
    }>	//  s hash
    OVER	//  s hash s
    SREFS	//  s hash _45
    2 EQINT	//  s hash _47
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _48 s
      SWAP	//  hash s _48
      HASHCU	//  hash s _50
      s2 PUSH	//  hash s _50 hash
      EQUAL	//  hash s _51
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _52=0
      }>	//  hash s
      LDREF	//  hash _86 _85
      DROP	//  hash _53
      HASHCU	//  hash _55
      SWAP	//  _55 hash
      EQUAL	//  _56
      IFJMP:<{	// 
        1 PUSHINT	//  _57=1
      }>	// 
      -100 PUSHINT	//  _58=-100
    }>	//  s hash
    OVER	//  s hash s
    SREFS	//  s hash _59
    1 EQINT	//  s hash _61
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _88 _87
      DROP	//  hash _62
      HASHCU	//  hash _64
      SWAP	//  _64 hash
      EQUAL	//  _65
      IFJMP:<{	// 
        0 PUSHINT	//  _66=0
      }>	// 
      -100 PUSHINT	//  _67=-100
    }>	//  s hash
    2DROP	// 
    -100 PUSHINT	//  _68=-100
  }>
  find_request PROCREF:<{
    //  s hash
    OVER	//  s hash s
    SREFS	//  s hash _2
    4 EQINT	//  s hash _4
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _5 s
      SWAP	//  hash s _5
      HASHCU	//  hash s _7
      s2 PUSH	//  hash s _7 hash
      EQUAL	//  hash s _8
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _9=0
      }>	//  hash s
      LDREF	//  hash _10 s
      SWAP	//  hash s _10
      HASHCU	//  hash s _12
      s2 PUSH	//  hash s _12 hash
      EQUAL	//  hash s _13
      IFJMP:<{	//  hash s
        2DROP	// 
        1 PUSHINT	//  _14=1
      }>	//  hash s
      LDREF	//  hash _15 s
      SWAP	//  hash s _15
      HASHCU	//  hash s _17
      s2 PUSH	//  hash s _17 hash
      EQUAL	//  hash s _18
      IFJMP:<{	//  hash s
        2DROP	// 
        2 PUSHINT	//  _19=2
      }>	//  hash s
      LDREF	//  hash _58 _57
      DROP	//  hash _20
      CTOS	//  hash s
      DUP	//  hash s s
      SREFS	//  hash s _23
      4 EQINT	//  hash s _25
      IFJMP:<{	//  hash s
        LDREF	//  hash _26 s
        SWAP	//  hash s _26
        HASHCU	//  hash s _28
        s2 PUSH	//  hash s _28 hash
        EQUAL	//  hash s _29
        IFJMP:<{	//  hash s
          2DROP	// 
          3 PUSHINT	//  _30=3
        }>	//  hash s
        LDREF	//  hash _31 s
        SWAP	//  hash s _31
        HASHCU	//  hash s _33
        s2 PUSH	//  hash s _33 hash
        EQUAL	//  hash s _34
        IFJMP:<{	//  hash s
          2DROP	// 
          4 PUSHINT	//  _35=4
        }>	//  hash s
        LDREF	//  hash _36 s
        SWAP	//  hash s _36
        HASHCU	//  hash s _38
        s2 PUSH	//  hash s _38 hash
        EQUAL	//  hash s _39
        IFJMP:<{	//  hash s
          2DROP	// 
          5 PUSHINT	//  _40=5
        }>	//  hash s
        LDREF	//  hash _66 _65
        DROP	//  hash _41
        CTOS	//  hash s
        SWAP	//  s hash
        find_request_inline INLINECALLDICT	//  _45
        6 ADDCONST	//  _46
      }>	//  hash s
      SWAP	//  s hash
      find_request_inline INLINECALLDICT	//  _48
      3 ADDCONST	//  _49
    }>	//  s hash
    find_request_inline INLINECALLDICT	//  _50
  }>
  replace_request_old PROC:<{
    //  b old_slice pos lvl request
    3 PUSHINT	//  b old_slice pos lvl request cnt_inplace=3
    s2 PUSH	//  b old_slice pos lvl request cnt_inplace=3 lvl
    2 EQINT	//  b old_slice pos lvl request cnt_inplace=3 _8
    IF:<{	//  b old_slice pos lvl request cnt_inplace=3
      DROP	//  b old_slice pos lvl request
      4 PUSHINT	//  b old_slice pos lvl request cnt_inplace
    }>	//  b old_slice pos lvl request cnt_inplace
    s3 s(-1) PUXC	//  b old_slice pos lvl request pos cnt_inplace
    LESS	//  b old_slice pos lvl request _11
    IF:<{	//  b old_slice pos lvl request
      NIP	//  b old_slice pos request
      SWAP	//  b old_slice request pos
      REPEAT:<{	//  b old_slice request
        SWAP	//  b request old_slice
        LDREF	//  b request _12 old_slice
        s0 s3 XCHG	//  old_slice request _12 b
        STREF	//  old_slice request b
        -ROT	//  b old_slice request
      }>
      ROT	//  old_slice request b
      STREF	//  old_slice b
      OVER	//  old_slice b old_slice
      ISNULL	//  old_slice b _16
      NOT	//  old_slice b _17
      IF:<{	//  old_slice b
        OVER	//  old_slice b old_slice
        SREMPTY	//  old_slice b _18
        NOT	//  old_slice b _19
        IF:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _49 _48
          NIP	//  b old_slice
          SWAP	//  old_slice b
        }>	//  old_slice b
        OVER	//  old_slice b old_slice
        SREFS	//  old_slice b _22
        REPEAT:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _23 old_slice
          s0 s2 XCHG	//  old_slice _23 b
          STREF	//  old_slice b
        }>
        NIP	//  b
      }>ELSE<{
        NIP	//  b
      }>
    }>ELSE<{	//  b old_slice pos lvl request
      3 PUSHINT	//  b old_slice pos lvl request _26=3
      REPEAT:<{	//  b old_slice pos lvl request
        s0 s3 XCHG	//  b request pos lvl old_slice
        LDREF	//  b request pos lvl _27 old_slice
        s0 s5 XCHG	//  old_slice request pos lvl _27 b
        STREF	//  old_slice request pos lvl b
        s0 s4 XCHG
        s0 s3 XCHG	//  b old_slice pos lvl request
      }>
      PUSHNULL	//  b old_slice pos lvl request children_old_slice
      s4 PUSH	//  b old_slice pos lvl request children_old_slice old_slice
      SREMPTY	//  b old_slice pos lvl request children_old_slice _32
      NOT	//  b old_slice pos lvl request children_old_slice _33
      IF:<{	//  b old_slice pos lvl request children_old_slice
        DROP	//  b old_slice pos lvl request
        s0 s3 XCHG	//  b request pos lvl old_slice
        LDREF	//  b request pos lvl _55 _54
        DROP	//  b request pos lvl _34
        CTOS	//  b request pos lvl children_old_slice
        s0 s3 XCHG	//  b children_old_slice pos lvl request
      }>ELSE<{
        s4 POP	//  b children_old_slice pos lvl request
      }>
      NEWC	//  b children_old_slice pos lvl request _38
      s0 s3 XCHG	//  b children_old_slice _38 lvl request pos
      -3 ADDCONST	//  b children_old_slice _38 lvl request _40
      s0 s2 XCHG	//  b children_old_slice _38 _40 request lvl
      INC	//  b children_old_slice _38 _40 request _42
      s3 s4 XCHG
      SWAP	//  b _38 children_old_slice _40 _42 request
      replace_request_old CALLDICT	//  b children
      SWAP	//  children b
      STREF	//  b
    }>
    ENDC	//  _45
  }>
  replace_request_2 PROC:<{
    //  b old_slice pos request
    SWAP	//  b old_slice request pos
    REPEAT:<{	//  b old_slice request
      SWAP	//  b request old_slice
      LDREF	//  b request _4 old_slice
      s0 s3 XCHG	//  old_slice request _4 b
      STREF	//  old_slice request b
      -ROT	//  b old_slice request
    }>
    ROT	//  old_slice request b
    STREF	//  old_slice b
    OVER	//  old_slice b old_slice
    ISNULL	//  old_slice b _8
    NOT	//  old_slice b _9
    IF:<{	//  old_slice b
      OVER	//  old_slice b old_slice
      SREMPTY	//  old_slice b _10
      NOT	//  old_slice b _11
      IF:<{	//  old_slice b
        SWAP	//  b old_slice
        LDREF	//  b _22 _21
        NIP	//  b old_slice
        SWAP	//  old_slice b
      }>	//  old_slice b
      OVER	//  old_slice b old_slice
      SREFS	//  old_slice b _14
      REPEAT:<{	//  old_slice b
        SWAP	//  b old_slice
        LDREF	//  b _15 old_slice
        s0 s2 XCHG	//  old_slice _15 b
        STREF	//  old_slice b
      }>
      NIP	//  b
    }>ELSE<{
      NIP	//  b
    }>
    ENDC	//  _18
  }>
  replace_request_1 PROC:<{
    //  b old_slice pos request
    OVER	//  b old_slice pos request pos
    3 LESSINT	//  b old_slice pos request _5
    IF:<{	//  b old_slice pos request
      SWAP	//  b old_slice request pos
      REPEAT:<{	//  b old_slice request
        SWAP	//  b request old_slice
        LDREF	//  b request _6 old_slice
        s0 s3 XCHG	//  old_slice request _6 b
        STREF	//  old_slice request b
        -ROT	//  b old_slice request
      }>
      ROT	//  old_slice request b
      STREF	//  old_slice b
      OVER	//  old_slice b old_slice
      ISNULL	//  old_slice b _10
      NOT	//  old_slice b _11
      IF:<{	//  old_slice b
        OVER	//  old_slice b old_slice
        SREMPTY	//  old_slice b _12
        NOT	//  old_slice b _13
        IF:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _41 _40
          NIP	//  b old_slice
          SWAP	//  old_slice b
        }>	//  old_slice b
        OVER	//  old_slice b old_slice
        SREFS	//  old_slice b _16
        REPEAT:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _17 old_slice
          s0 s2 XCHG	//  old_slice _17 b
          STREF	//  old_slice b
        }>
        NIP	//  b
      }>ELSE<{
        NIP	//  b
      }>
    }>ELSE<{	//  b old_slice pos request
      3 PUSHINT	//  b old_slice pos request _20=3
      REPEAT:<{	//  b old_slice pos request
        s0 s2 XCHG	//  b request pos old_slice
        LDREF	//  b request pos _21 old_slice
        s0 s4 XCHG	//  old_slice request pos _21 b
        STREF	//  old_slice request pos b
        s3 s1 s3 XCHG3	//  b old_slice pos request
      }>
      PUSHNULL	//  b old_slice pos request children_old_slice
      s3 PUSH	//  b old_slice pos request children_old_slice old_slice
      SREMPTY	//  b old_slice pos request children_old_slice _26
      NOT	//  b old_slice pos request children_old_slice _27
      IF:<{	//  b old_slice pos request children_old_slice
        DROP	//  b old_slice pos request
        s0 s2 XCHG	//  b request pos old_slice
        LDREF	//  b request pos _47 _46
        DROP	//  b request pos _28
        CTOS	//  b request pos children_old_slice
        s0 s2 XCHG	//  b children_old_slice pos request
      }>ELSE<{
        s3 POP	//  b children_old_slice pos request
      }>
      NEWC	//  b children_old_slice pos request _32
      s0 s2 XCHG	//  b children_old_slice _32 request pos
      -3 ADDCONST	//  b children_old_slice _32 request _34
      s3 s0 s0 XCHG3	//  b _32 children_old_slice _34 request
      replace_request_2 INLINECALLDICT	//  b children
      SWAP	//  children b
      STREF	//  b
    }>
    ENDC	//  _37
  }>
  replace_request PROC:<{
    //  b old_slice pos request
    OVER	//  b old_slice pos request pos
    3 LESSINT	//  b old_slice pos request _5
    IF:<{	//  b old_slice pos request
      SWAP	//  b old_slice request pos
      REPEAT:<{	//  b old_slice request
        SWAP	//  b request old_slice
        LDREF	//  b request _6 old_slice
        s0 s3 XCHG	//  old_slice request _6 b
        STREF	//  old_slice request b
        -ROT	//  b old_slice request
      }>
      ROT	//  old_slice request b
      STREF	//  old_slice b
      OVER	//  old_slice b old_slice
      ISNULL	//  old_slice b _10
      NOT	//  old_slice b _11
      IF:<{	//  old_slice b
        OVER	//  old_slice b old_slice
        SREMPTY	//  old_slice b _12
        NOT	//  old_slice b _13
        IF:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _41 _40
          NIP	//  b old_slice
          SWAP	//  old_slice b
        }>	//  old_slice b
        OVER	//  old_slice b old_slice
        SREFS	//  old_slice b _16
        REPEAT:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _17 old_slice
          s0 s2 XCHG	//  old_slice _17 b
          STREF	//  old_slice b
        }>
        NIP	//  b
      }>ELSE<{
        NIP	//  b
      }>
    }>ELSE<{	//  b old_slice pos request
      3 PUSHINT	//  b old_slice pos request _20=3
      REPEAT:<{	//  b old_slice pos request
        s0 s2 XCHG	//  b request pos old_slice
        LDREF	//  b request pos _21 old_slice
        s0 s4 XCHG	//  old_slice request pos _21 b
        STREF	//  old_slice request pos b
        s3 s1 s3 XCHG3	//  b old_slice pos request
      }>
      PUSHNULL	//  b old_slice pos request children_old_slice
      s3 PUSH	//  b old_slice pos request children_old_slice old_slice
      SREMPTY	//  b old_slice pos request children_old_slice _26
      NOT	//  b old_slice pos request children_old_slice _27
      IF:<{	//  b old_slice pos request children_old_slice
        DROP	//  b old_slice pos request
        s0 s2 XCHG	//  b request pos old_slice
        LDREF	//  b request pos _47 _46
        DROP	//  b request pos _28
        CTOS	//  b request pos children_old_slice
        s0 s2 XCHG	//  b children_old_slice pos request
      }>ELSE<{
        s3 POP	//  b children_old_slice pos request
      }>
      NEWC	//  b children_old_slice pos request _32
      s0 s2 XCHG	//  b children_old_slice _32 request pos
      -3 ADDCONST	//  b children_old_slice _32 request _34
      s3 s0 s0 XCHG3	//  b _32 children_old_slice _34 request
      replace_request_1 INLINECALLDICT	//  b children
      SWAP	//  children b
      STREF	//  b
    }>
    ENDC	//  _37
  }>
  recv_external PROC:<{
    //  in_msg_body
    256 LDU	//  public_key in_msg_body
    9 PUSHPOW2	//  public_key in_msg_body _7=512
    LDSLICEX	//  public_key signature in_msg_body
    LDREF	//  public_key signature request_cell in_msg_body
    ENDS
    DUP	//  public_key signature request_cell request_cell
    CTOS	//  public_key signature request_cell request
    s0 s2 PUXC
    s4 PUSH	//  public_key request request_cell request signature public_key
    CHKSIGNS	//  public_key request request_cell _16
    NOT	//  public_key request request_cell _17
    100 THROWIF
    SWAP	//  public_key request_cell request
    32 LDU	//  public_key request_cell valid_until request
    OVER
    NOW	//  public_key request_cell valid_until request valid_until _24
    LESS	//  public_key request_cell valid_until request _25
    101 THROWIF
    NOW	//  public_key request_cell valid_until request _28
    60 ADDCONST	//  public_key request_cell valid_until request _30
    s2 s(-1) PUXC	//  public_key request_cell valid_until request valid_until _30
    GREATER	//  public_key request_cell valid_until request _31
    102 THROWIF
    ACCEPT
    load_data INLINECALLDICT	//  public_key request_cell valid_until request tree public_key1 public_key2
    0 PUSHINT	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0
    s7 s2 PUSH2	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0 public_key public_key1
    EQUAL	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0 _40
    IF:<{	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0
      DROP
      s6 POP	//  public_key2 request_cell valid_until request tree public_key1
      1 PUSHINT	//  public_key2 request_cell valid_until request tree public_key1 key_mask=1
    }>ELSE<{	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0
      s7 s1 XCPU	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2 public_key public_key2
      EQUAL	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2 _42
      IF:<{	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2
        s6 POP	//  public_key2 request_cell valid_until request tree public_key1
        2 PUSHINT	//  public_key2 request_cell valid_until request tree public_key1 key_mask=2
      }>ELSE<{	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2
        103 THROW
        s0 s6 XCHG	//  public_key2 request_cell valid_until request tree public_key1 key_mask
      }>
    }>
    s0 s2 XCHG	//  public_key2 request_cell valid_until request key_mask public_key1 tree
    5 LDU	//  public_key2 request_cell valid_until request key_mask public_key1 cnt tree
    20 LDU	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask tree
    s2 PUSH	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask tree cnt
    5 LSHIFT#	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask tree _57
    LDSLICEX	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree
    s8 PUSH	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree request_cell
    HASHCU	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree _60
    s1 s(-1) PUXC	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree tree _60
    find_request INLINECALLDICT	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree pos
    s0 s5 XCHG
    NEWC	//  public_key2 request_cell valid_until request key_mask pos cnt full_mask valid_untils tree public_key1 _63
    256 STU	//  public_key2 request_cell valid_until request key_mask pos cnt full_mask valid_untils tree _65
    s1 s10 XCHG	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils public_key2 _65
    256 STU	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree
    s4 PUSH	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree pos
    0 LESSINT	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree _69
    IF:<{	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree
      s4 POP
      s5 POP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask
      NEWC	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils
      s5 PUSH	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy
      0 PUSHINT	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos=0
      WHILE:<{
        s0 s4 PUSH2	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos npos cnt
        LESS	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos _75
      }>DO<{	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos
        SWAP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos valid_untils_copy
        32 LDU	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos _76 valid_untils_copy
        SWAP
        NOW	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos valid_untils_copy _76 _79
        LESS	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos valid_untils_copy _80
        IF:<{	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos valid_untils_copy
          s1 s4 XCPU	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos cnt
          ADD	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos
          SWAP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos valid_untils_copy
        }>	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos valid_untils_copy
        SWAP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos
        INC	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos
      }>	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils valid_untils_copy npos
      NIP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos
      s0 s3 PUSH2	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos npos cnt
      GREATER	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos _84
      IF:<{	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos
        s3 PUSH	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos cnt
        INC	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos _86
        SUB	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos
      }>	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos
      DUP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos npos
      10 EQINT	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos _90
      104 THROWIF
      DUP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos npos
      5 LSHIFT#	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask new_valid_untils npos _94
      s1 s7 XCHG	//  tree request_cell valid_until npos key_mask new_tree cnt full_mask new_valid_untils valid_untils _94
      LDSLICEX	//  tree request_cell valid_until npos key_mask new_tree cnt full_mask new_valid_untils _92 valid_untils
      -ROT	//  tree request_cell valid_until npos key_mask new_tree cnt full_mask valid_untils new_valid_untils _92
      STSLICER	//  tree request_cell valid_until npos key_mask new_tree cnt full_mask valid_untils new_valid_untils
      s1 s7 XCHG	//  tree request_cell valid_untils npos key_mask new_tree cnt full_mask valid_until new_valid_untils
      32 STU	//  tree request_cell valid_untils npos key_mask new_tree cnt full_mask new_valid_untils
      s5 PUSH	//  tree request_cell valid_untils npos key_mask new_tree cnt full_mask new_valid_untils npos
      INC	//  tree request_cell valid_untils npos key_mask new_tree cnt full_mask new_valid_untils _101
      s3 PUSH	//  tree request_cell valid_untils npos key_mask new_tree cnt full_mask new_valid_untils _101 cnt
      LESS	//  tree request_cell valid_untils npos key_mask new_tree cnt full_mask new_valid_untils _102
      IF:<{	//  tree request_cell valid_untils npos key_mask new_tree cnt full_mask new_valid_untils
        s0 s6 XCHG	//  tree request_cell new_valid_untils npos key_mask new_tree cnt full_mask valid_untils
        32 LDU	//  tree request_cell new_valid_untils npos key_mask new_tree cnt full_mask _193 _192
        NIP	//  tree request_cell new_valid_untils npos key_mask new_tree cnt full_mask valid_untils
        s1 s6 XCHG	//  tree request_cell full_mask npos key_mask new_tree cnt new_valid_untils valid_untils
        STSLICER	//  tree request_cell full_mask npos key_mask new_tree cnt new_valid_untils
        s0 s5 XCHG	//  tree request_cell new_valid_untils npos key_mask new_tree cnt full_mask
      }>ELSE<{
        s6 POP	//  tree request_cell new_valid_untils npos key_mask new_tree cnt full_mask
      }>
      s4 PUSH	//  tree request_cell new_valid_untils npos key_mask new_tree cnt full_mask npos
      INC	//  tree request_cell new_valid_untils npos key_mask new_tree cnt full_mask _109
      s1 s2 XCHG	//  tree request_cell new_valid_untils npos key_mask new_tree full_mask cnt _109
      MAX	//  tree request_cell new_valid_untils npos key_mask new_tree full_mask ncnt
      ROT	//  tree request_cell new_valid_untils npos key_mask full_mask ncnt new_tree
      5 STU	//  tree request_cell new_valid_untils npos key_mask full_mask new_tree
      3 PUSHINT	//  tree request_cell new_valid_untils npos key_mask full_mask new_tree _115=3
      s4 PUSH	//  tree request_cell new_valid_untils npos key_mask full_mask new_tree _115=3 npos
      1 LSHIFT#	//  tree request_cell new_valid_untils npos key_mask full_mask new_tree _115=3 _117
      LSHIFT	//  tree request_cell new_valid_untils npos key_mask full_mask new_tree _118
      NOT	//  tree request_cell new_valid_untils npos key_mask full_mask new_tree _119
      s1 s2 XCHG	//  tree request_cell new_valid_untils npos key_mask new_tree full_mask _119
      AND	//  tree request_cell new_valid_untils npos key_mask new_tree next_full_mask
      s3 PUSH	//  tree request_cell new_valid_untils npos key_mask new_tree next_full_mask npos
      1 LSHIFT#	//  tree request_cell new_valid_untils npos key_mask new_tree next_full_mask _122
      s1 s3 XCHG	//  tree request_cell new_valid_untils npos next_full_mask new_tree key_mask _122
      LSHIFT	//  tree request_cell new_valid_untils npos next_full_mask new_tree _123
      s1 s2 XCHG	//  tree request_cell new_valid_untils npos new_tree next_full_mask _123
      OR	//  tree request_cell new_valid_untils npos new_tree next_full_mask
      SWAP	//  tree request_cell new_valid_untils npos next_full_mask new_tree
      20 STU	//  tree request_cell new_valid_untils npos new_tree
      s1 s2 XCHG	//  tree request_cell npos new_valid_untils new_tree
      STB	//  tree request_cell npos new_tree
      s3 s1 s3 XCHG3	//  new_tree tree npos request_cell
      replace_request INLINECALLDICT	//  root
      c4 POP
    }>ELSE<{	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree
      s7 POP
      s7 POP	//  tree valid_untils new_tree request key_mask pos cnt full_mask
      s2 PUSH	//  tree valid_untils new_tree request key_mask pos cnt full_mask pos
      1 LSHIFT#	//  tree valid_untils new_tree request key_mask pos cnt full_mask _134
      s1 s(-1) PUXC	//  tree valid_untils new_tree request key_mask pos cnt full_mask full_mask _134
      RSHIFT	//  tree valid_untils new_tree request key_mask pos cnt full_mask _135
      3 PUSHINT	//  tree valid_untils new_tree request key_mask pos cnt full_mask _135 _136=3
      AND	//  tree valid_untils new_tree request key_mask pos cnt full_mask cur_mask
      s0 s4 PUXC	//  tree valid_untils new_tree request cur_mask pos cnt full_mask cur_mask key_mask
      OR	//  tree valid_untils new_tree request cur_mask pos cnt full_mask next_mask
      s4 s4 XCPU	//  tree valid_untils new_tree request next_mask pos cnt full_mask cur_mask next_mask
      EQUAL	//  tree valid_untils new_tree request next_mask pos cnt full_mask _141
      105 THROWIF
      s3 PUSH	//  tree valid_untils new_tree request next_mask pos cnt full_mask next_mask
      3 EQINT	//  tree valid_untils new_tree request next_mask pos cnt full_mask _144
      IF:<{	//  tree valid_untils new_tree request next_mask pos cnt full_mask
        s0 s4 XCHG	//  tree valid_untils new_tree full_mask next_mask pos cnt request
        8 LDU	//  tree valid_untils new_tree full_mask next_mask pos cnt mode request
        LDREF	//  tree valid_untils new_tree full_mask next_mask pos cnt mode _197 _196
        DROP	//  tree valid_untils new_tree full_mask next_mask pos cnt mode msg_to_send
        SWAP	//  tree valid_untils new_tree full_mask next_mask pos cnt msg_to_send mode
        SENDRAWMSG
      }>ELSE<{
        s4 POP	//  tree valid_untils new_tree full_mask next_mask pos cnt
      }>
      SWAP	//  tree valid_untils new_tree full_mask next_mask cnt pos
      1 LSHIFT#	//  tree valid_untils new_tree full_mask next_mask cnt _155
      s1 s2 XCHG	//  tree valid_untils new_tree full_mask cnt next_mask _155
      LSHIFT	//  tree valid_untils new_tree full_mask cnt _156
      s1 s2 XCHG	//  tree valid_untils new_tree cnt full_mask _156
      OR	//  tree valid_untils new_tree cnt next_full_mask
      s0 s2 XCHG	//  tree valid_untils next_full_mask cnt new_tree
      5 STU	//  tree valid_untils next_full_mask new_tree
      20 STU	//  tree valid_untils new_tree
      SWAP	//  tree new_tree valid_untils
      STSLICER	//  tree new_tree
      OVER	//  tree new_tree tree
      SREFS	//  tree new_tree _165
      REPEAT:<{	//  tree new_tree
        SWAP	//  new_tree tree
        LDREF	//  new_tree _166 tree
        s0 s2 XCHG	//  tree _166 new_tree
        STREF	//  tree new_tree
      }>
      NIP	//  new_tree
      ENDC	//  _169
      c4 POP
    }>
  }>
  recv_internal PROC:<{
    // 
  }>
}END>c
